'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.findGraphQLTags = findGraphQLTags;

var _graphqlLanguageServiceUtils = require('graphql-language-service-utils');

var _babylon = require('babylon');

// Attempt to be as inclusive as possible of source text.
/**
 *  Copyright (c) Facebook, Inc.
 *  All rights reserved.
 *
 *  This source code is licensed under the license found in the
 *  LICENSE file in the root directory of this source tree.
 *
 *  
 */

var BABYLON_OPTIONS = {
  allowImportExportEverywhere: true,
  allowReturnOutsideFunction: true,
  allowSuperOutsideMethod: true,
  sourceType: 'module',
  plugins: [
  // Previously "*"
  'asyncGenerators', 'classProperties', 'decorators', 'doExpressions', 'dynamicImport', 'exportExtensions', 'flow', 'functionBind', 'functionSent', 'jsx', 'objectRestSpread'],
  strictMode: false
};

function findGraphQLTags(text) {
  var result = [];
  var ast = (0, _babylon.parse)(text, BABYLON_OPTIONS);

  var visitors = {
    CallExpression: function CallExpression(node) {
      var callee = node.callee;
      if (!(callee.type === 'Identifier' && CREATE_CONTAINER_FUNCTIONS[callee.name] || callee.kind === 'MemberExpression' && callee.object.type === 'Identifier' && callee.object.value === 'Relay' && callee.property.type === 'Identifier' && CREATE_CONTAINER_FUNCTIONS[callee.property.name])) {
        traverse(node, visitors);
        return;
      }
      var fragments = node.arguments[1];
      if (fragments.type === 'ObjectExpression') {
        fragments.properties.forEach(function (property) {
          var tagName = getGraphQLTagName(property.value.tag);
          var template = getGraphQLText(property.value.quasi);
          if (tagName === 'graphql' || tagName === 'graphql.experimental') {
            var loc = property.value.loc;
            var _range = new _graphqlLanguageServiceUtils.Range(new _graphqlLanguageServiceUtils.Position(loc.start.line - 1, loc.start.column), new _graphqlLanguageServiceUtils.Position(loc.end.line - 1, loc.end.column));
            result.push({
              tag: tagName,
              template: template,
              range: _range
            });
          }
        });
      } else {
        var tagName = getGraphQLTagName(fragments.tag);
        var _template = getGraphQLText(fragments.quasi);
        if (tagName === 'graphql' || tagName === 'graphql.experimental') {
          var loc = fragments.loc;
          var _range2 = new _graphqlLanguageServiceUtils.Range(new _graphqlLanguageServiceUtils.Position(loc.start.line - 1, loc.start.column), new _graphqlLanguageServiceUtils.Position(loc.end.line - 1, loc.end.column));
          result.push({
            tag: tagName,
            template: _template,
            range: _range2
          });
        }
      }

      // Visit remaining arguments
      for (var ii = 2; ii < node.arguments.length; ii++) {
        visit(node.arguments[ii], visitors);
      }
    },
    TaggedTemplateExpression: function TaggedTemplateExpression(node) {
      var tagName = getGraphQLTagName(node.tag);
      if (tagName != null) {
        if (tagName === 'graphql' || tagName === 'graphql.experimental') {
          var loc = node.quasi.quasis[0].loc;
          var _range3 = new _graphqlLanguageServiceUtils.Range(new _graphqlLanguageServiceUtils.Position(loc.start.line - 1, loc.start.column), new _graphqlLanguageServiceUtils.Position(loc.end.line - 1, loc.end.column));
          result.push({
            tag: tagName,
            template: node.quasi.quasis[0].value.raw,
            range: _range3
          });
        }
      }
    }
  };
  visit(ast, visitors);
  return result;
}

var CREATE_CONTAINER_FUNCTIONS = {
  createFragmentContainer: true,
  createPaginationContainer: true,
  createRefetchContainer: true
};

var IDENTIFIERS = { graphql: true };

var IGNORED_KEYS = {
  comments: true,
  end: true,
  leadingComments: true,
  loc: true,
  name: true,
  start: true,
  trailingComments: true,
  type: true
};

function getGraphQLTagName(tag) {
  if (tag.type === 'Identifier' && IDENTIFIERS.hasOwnProperty(tag.name)) {
    return tag.name;
  } else if (tag.type === 'MemberExpression' && tag.object.type === 'Identifier' && tag.object.name === 'graphql' && tag.property.type === 'Identifier' && tag.property.name === 'experimental') {
    return 'graphql.experimental';
  }
  return null;
}

function getGraphQLText(quasi) {
  var quasis = quasi.quasis;
  return quasis[0].value.raw;
}

function visit(node, visitors) {
  var fn = visitors[node.type];
  if (fn != null) {
    fn(node);
    return;
  }
  traverse(node, visitors);
}

function traverse(node, visitors) {
  for (var key in node) {
    if (IGNORED_KEYS[key]) {
      continue;
    }
    var prop = node[key];
    if (prop && typeof prop === 'object' && typeof prop.type === 'string') {
      visit(prop, visitors);
    } else if (Array.isArray(prop)) {
      prop.forEach(function (item) {
        if (item && typeof item === 'object' && typeof item.type === 'string') {
          visit(item, visitors);
        }
      });
    }
  }
}