{"version":3,"sources":["src/transformers/remotePathTransformer.ts"],"names":[],"mappings":"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","file":"remotePathTransformer.js","sourcesContent":["/*---------------------------------------------------------\n * Copyright (C) Microsoft Corporation. All rights reserved.\n *--------------------------------------------------------*/\n\nimport * as path from 'path';\nimport * as fs from 'fs';\n\nimport {BasePathTransformer} from './basePathTransformer';\n\nimport {logger} from 'vscode-debugadapter';\nimport {DebugProtocol} from 'vscode-debugprotocol';\nimport * as utils from '../utils';\nimport * as errors from '../errors';\nimport {ISetBreakpointsArgs, ICommonRequestArgs, IAttachRequestArgs, ILaunchRequestArgs, IStackTraceResponseBody} from '../debugAdapterInterfaces';\n\n/**\n * Converts a local path from Code to a path on the target.\n */\nexport class RemotePathTransformer extends BasePathTransformer {\n    private _localRoot: string;\n    private _remoteRoot: string;\n\n    public launch(args: ILaunchRequestArgs): Promise<void> {\n        return this.init(args);\n    }\n\n    public attach(args: IAttachRequestArgs): Promise<void> {\n        return this.init(args);\n    }\n\n    private init(args: ICommonRequestArgs): Promise<void> {\n        // Maybe validate that it's absolute, for either windows or unix\n        this._remoteRoot = args.remoteRoot;\n\n        // Validate that localRoot is absolute and exists\n        let localRootP = Promise.resolve();\n        if (args.localRoot) {\n            const localRoot = args.localRoot;\n            if (!path.isAbsolute(localRoot)) {\n                return Promise.reject(errors.attributePathRelative('localRoot', localRoot));\n            }\n\n            localRootP = new Promise<void>((resolve, reject) => {\n                fs.exists(localRoot, exists => {\n                    if (!exists) {\n                        reject(errors.attributePathNotExist('localRoot', localRoot));\n                    }\n\n                    this._localRoot = localRoot;\n                    resolve();\n                });\n            });\n        }\n\n        return localRootP;\n    }\n\n    public setBreakpoints(args: ISetBreakpointsArgs): void {\n        if (args.source.path) {\n            args.source.path = this.getTargetPathFromClientPath(args.source.path);\n        }\n\n        return super.setBreakpoints(args);\n    }\n\n    public scriptParsed(scriptPath: string): string {\n        scriptPath = this.getClientPathFromTargetPath(scriptPath);\n        return super.scriptParsed(scriptPath);\n    }\n\n    public stackTraceResponse(response: IStackTraceResponseBody): void {\n        response.stackFrames.forEach(stackFrame => this.fixSource(stackFrame.source));\n    }\n\n    public fixSource(source: DebugProtocol.Source): void {\n        const remotePath = source && source.path;\n        if (remotePath) {\n            const localPath = this.getClientPathFromTargetPath(remotePath);\n            if (utils.existsSync(localPath)) {\n                source.path = localPath;\n                source.sourceReference = undefined;\n                source.origin = undefined;\n            }\n        }\n    }\n\n    private shouldMapPaths(remotePath: string): boolean {\n        // Map paths only if localRoot/remoteRoot are set, and the remote path is absolute on some system\n        return !!this._localRoot && !!this._remoteRoot && (path.posix.isAbsolute(remotePath) || path.win32.isAbsolute(remotePath));\n    }\n\n    public getClientPathFromTargetPath(remotePath: string): string {\n        if (!this.shouldMapPaths(remotePath)) return remotePath;\n\n        const relPath = relative(this._remoteRoot, remotePath);\n        let localPath = join(this._localRoot, relPath);\n\n        localPath = utils.fixDriveLetterAndSlashes(localPath);\n        logger.log(`Mapped remoteToLocal: ${remotePath} -> ${localPath}`);\n        return localPath;\n    }\n\n    public getTargetPathFromClientPath(localPath: string): string {\n        if (!this.shouldMapPaths(localPath)) return localPath;\n\n        const relPath = relative(this._localRoot, localPath);\n        let remotePath = join(this._remoteRoot, relPath);\n\n        remotePath = utils.fixDriveLetterAndSlashes(remotePath, /*uppercaseDriveLetter=*/true);\n        logger.log(`Mapped localToRemote: ${localPath} -> ${remotePath}`);\n        return remotePath;\n    }\n}\n\n/**\n * Cross-platform path.relative\n */\nfunction relative(a: string, b: string): string {\n    return a.match(/^[A-Za-z]:/) ?\n        path.win32.relative(a, b) :\n        path.posix.relative(a, b);\n}\n\n/**\n * Cross-platform path.join\n */\nfunction join(a: string, b: string): string {\n    return a.match(/^[A-Za-z]:/) ?\n        path.win32.join(a, b) :\n        utils.forceForwardSlashes(path.posix.join(a, b));\n}\n"],"sourceRoot":"../../.."}