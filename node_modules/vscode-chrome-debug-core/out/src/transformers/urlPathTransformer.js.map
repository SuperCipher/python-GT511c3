{"version":3,"sources":["src/transformers/urlPathTransformer.ts"],"names":[],"mappings":"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","file":"urlPathTransformer.js","sourcesContent":["/*---------------------------------------------------------\n * Copyright (C) Microsoft Corporation. All rights reserved.\n *--------------------------------------------------------*/\n\nimport {BasePathTransformer} from './basePathTransformer';\n\nimport {ISetBreakpointsArgs, ILaunchRequestArgs, IAttachRequestArgs, IStackTraceResponseBody} from '../debugAdapterInterfaces';\nimport * as utils from '../utils';\nimport {logger} from 'vscode-debugadapter';\nimport {DebugProtocol} from 'vscode-debugprotocol';\nimport * as ChromeUtils from '../chrome/chromeUtils';\nimport {ChromeDebugAdapter} from '../chrome/chromeDebugAdapter';\n\nimport * as path from 'path';\n\n/**\n * Converts a local path from Code to a path on the target.\n */\nexport class UrlPathTransformer extends BasePathTransformer {\n    private _webRoot: string;\n    private _pathMapping: {[url: string]: string} = {};\n    private _clientPathToTargetUrl = new Map<string, string>();\n    private _targetUrlToClientPath = new Map<string, string>();\n\n    public launch(args: ILaunchRequestArgs): Promise<void> {\n        this._webRoot = args.webRoot;\n        this._pathMapping = args.pathMapping || {};\n        return super.launch(args);\n    }\n\n    public attach(args: IAttachRequestArgs): Promise<void> {\n        this._webRoot = args.webRoot;\n        this._pathMapping = args.pathMapping || {};\n        return super.attach(args);\n    }\n\n    public setBreakpoints(args: ISetBreakpointsArgs): void {\n        if (!args.source.path) {\n            // sourceReference script, nothing to do\n            return;\n        }\n\n        if (utils.isURL(args.source.path)) {\n            // already a url, use as-is\n            logger.log(`Paths.setBP: ${args.source.path} is already a URL`);\n            return;\n        }\n\n        const path = utils.canonicalizeUrl(args.source.path);\n        const url = this.getTargetPathFromClientPath(path);\n        if (url) {\n            args.source.path = url;\n            logger.log(`Paths.setBP: Resolved ${path} to ${args.source.path}`);\n            return;\n        } else {\n            logger.log(`Paths.setBP: No target url cached yet for client path: ${path}.`);\n            args.source.path = path;\n            return;\n        }\n    }\n\n    public clearTargetContext(): void {\n        this._clientPathToTargetUrl = new Map<string, string>();\n        this._targetUrlToClientPath = new Map<string, string>();\n    }\n\n    public scriptParsed(scriptUrl: string): string {\n        let clientPath = ChromeUtils.targetUrlToClientPathByPathMappings(scriptUrl, this._pathMapping);\n\n        if (!clientPath) {\n            clientPath = ChromeUtils.targetUrlToClientPath(this._webRoot, scriptUrl);\n        }\n\n        if (!clientPath) {\n            // It's expected that eval scripts (eval://) won't be resolved\n            if (!scriptUrl.startsWith(ChromeDebugAdapter.EVAL_NAME_PREFIX)) {\n                logger.log(`Paths.scriptParsed: could not resolve ${scriptUrl} to a file under webRoot: ${this._webRoot}. It may be external or served directly from the server's memory (and that's OK).`);\n            }\n        } else {\n            logger.log(`Paths.scriptParsed: resolved ${scriptUrl} to ${clientPath}. webRoot: ${this._webRoot}`);\n            this._clientPathToTargetUrl.set(clientPath, scriptUrl);\n            this._targetUrlToClientPath.set(scriptUrl, clientPath);\n\n            scriptUrl = clientPath;\n        }\n\n        return scriptUrl;\n    }\n\n    public stackTraceResponse(response: IStackTraceResponseBody): void {\n        response.stackFrames.forEach(frame => this.fixSource(frame.source));\n    }\n\n    public fixSource(source: DebugProtocol.Source): void {\n        if (source && source.path) {\n            // Try to resolve the url to a path in the workspace. If it's not in the workspace,\n            // just use the script.url as-is. It will be resolved or cleared by the SourceMapTransformer.\n            const clientPath = this.getClientPathFromTargetPath(source.path) ||\n                ChromeUtils.targetUrlToClientPath(this._webRoot, source.path);\n\n            // Incoming stackFrames have sourceReference and path set. If the path was resolved to a file in the workspace,\n            // clear the sourceReference since it's not needed.\n            if (clientPath) {\n                source.path = clientPath;\n                source.sourceReference = undefined;\n                source.origin = undefined;\n                source.name = path.basename(clientPath);\n            }\n        }\n    }\n\n    public getTargetPathFromClientPath(clientPath: string): string {\n        // If it's already a URL, skip the Map\n        return path.isAbsolute(clientPath) ?\n            this._clientPathToTargetUrl.get(utils.canonicalizeUrl(clientPath)) :\n            clientPath;\n    }\n\n    public getClientPathFromTargetPath(targetPath: string): string {\n        return this._targetUrlToClientPath.get(targetPath);\n    }\n}\n"],"sourceRoot":"../../.."}