{"version":3,"sources":["src/chrome/consoleHelper.ts"],"names":[],"mappings":"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","file":"consoleHelper.js","sourcesContent":["/*---------------------------------------------------------\n * Copyright (C) Microsoft Corporation. All rights reserved.\n *--------------------------------------------------------*/\n\nimport Crdp from '../../crdp/crdp';\nimport * as variables from './variables';\n\nexport function formatExceptionDetails(e: Crdp.Runtime.ExceptionDetails): string {\n    if (!e.exception) {\n        return `${e.text || 'Uncaught Error'}\\n${stackTraceToString(e.stackTrace)}`;\n    }\n\n    return (e.exception.className && e.exception.className.endsWith('Error') && e.exception.description) ||\n        (`Error: ${variables.getRemoteObjectPreview(e.exception)}\\n${stackTraceToString(e.stackTrace)}`);\n}\n\nexport function formatConsoleArguments(m: Crdp.Runtime.ConsoleAPICalledEvent): { args: Crdp.Runtime.RemoteObject[], isError: boolean } {\n    let args: Crdp.Runtime.RemoteObject[];\n    switch (m.type) {\n        case 'log':\n        case 'debug':\n        case 'info':\n        case 'error':\n        case 'warning':\n        case 'dir':\n        case 'timeEnd':\n        case 'count':\n            args = resolveParams(m);\n            break;\n        case 'assert':\n            const formattedParams = m.args.length ?\n                // 'assert' doesn't support format specifiers\n                resolveParams(m, /*skipFormatSpecifiers=*/true) :\n                [];\n\n            const assertMsg = (formattedParams[0] && formattedParams[0].type === 'string') ?\n                formattedParams.shift().value :\n                '';\n            let outputText = `Assertion failed: ${assertMsg}\\n` + stackTraceToString(m.stackTrace);\n\n            args = [{ type: 'string', value: outputText }, ...formattedParams];\n            break;\n        case 'startGroup':\n        case 'startGroupCollapsed':\n            let startMsg = '‹Start group›';\n            const formattedGroupParams = resolveParams(m);\n            if (formattedGroupParams.length && formattedGroupParams[0].type === 'string') {\n                startMsg += ': ' + formattedGroupParams.shift().value;\n            }\n\n            args = [{ type: 'string', value: startMsg}, ...formattedGroupParams];\n            break;\n        case 'endGroup':\n            args = [{ type: 'string', value: '‹End group›' }];\n            break;\n        case 'trace':\n            args = [{ type: 'string', value: 'console.trace()\\n' + stackTraceToString(m.stackTrace) }];\n            break;\n        default:\n            // Some types we have to ignore\n            return null;\n    }\n\n    const isError = m.type === 'assert' || m.type === 'error';\n    return { args, isError };\n}\n\n/**\n * Collapse leading non-object arguments, and apply format specifiers (%s, %d, etc)\n */\nfunction resolveParams(m: Crdp.Runtime.ConsoleAPICalledEvent, skipFormatSpecifiers?: boolean): Crdp.Runtime.RemoteObject[] {\n    if (!m.args.length || m.args[0].objectId) {\n        // If the first arg is not text, nothing is going to happen here\n        return m.args;\n    }\n\n    // Find all %s, %i, etc in the first argument, which is always the main text. Strip %\n    let formatSpecifiers: string[];\n    const firstTextArg = m.args.shift();\n    let firstTextArgValue = variables.getRemoteObjectPreview(firstTextArg, /*stringify=*/false) + '';\n    if (firstTextArg.type === 'string' && !skipFormatSpecifiers) {\n        formatSpecifiers = (firstTextArgValue.match(/\\%[sidfoOc]/g) || [])\n            .map(spec => spec[1]);\n    } else {\n        formatSpecifiers = [];\n    }\n\n    // Collapse all text parameters, formatting properly if there's a format specifier\n    let collapsedArgIdx = 0;\n    for (; collapsedArgIdx < m.args.length; collapsedArgIdx++) {\n        const param = m.args[collapsedArgIdx];\n        if (param.objectId && !formatSpecifiers.length) {\n            // If the next arg is an object, and we're done consuming format specifiers, quit\n            break;\n        }\n\n        const formatSpec = formatSpecifiers.shift();\n        let formatted: string;\n        const paramValue = typeof param.value !== 'undefined' ? param.value : param.description;\n        if (formatSpec === 's') {\n            formatted = paramValue;\n        } else if (['i', 'd'].indexOf(formatSpec) >= 0) {\n            formatted = Math.floor(+paramValue) + '';\n        } else if (formatSpec === 'f') {\n            formatted = +paramValue + '';\n        } else if (formatSpec === 'c') {\n            // %c - Applies CSS color rules\n            // Could use terminal color codes in the future\n            formatted = '';\n        } else if (['o', 'O'].indexOf(formatSpec) >= 0) {\n            // Not supported -\n            // %o - expandable DOM element\n            // %O - expandable JS object\n            formatted = paramValue;\n        }\n\n        // If this param had a format specifier, search and replace it with the formatted param.\n        // Otherwise, append it to the end of the text\n        if (formatSpec) {\n            firstTextArgValue = firstTextArgValue.replace('%' + formatSpec, formatted);\n        } else {\n            firstTextArgValue += ' ' + param.value;\n        }\n    }\n\n    // Return the collapsed text argument, with all others left alone\n    const newFormattedTextArg: Crdp.Runtime.RemoteObject = { type: 'string', value: firstTextArgValue };\n    const otherArgs = m.args.slice(collapsedArgIdx);\n    return [newFormattedTextArg, ...otherArgs];\n}\n\nfunction stackTraceToString(stackTrace: Crdp.Runtime.StackTrace): string {\n    if (!stackTrace) {\n        return '';\n    }\n\n    return stackTrace.callFrames\n        .map(frame => {\n            const fnName = frame.functionName || (frame.url ? '(anonymous)' : '(eval)');\n            const fileName = frame.url ? frame.url : 'eval';\n            return `    at ${fnName} (${fileName}:${frame.lineNumber + 1}:${frame.columnNumber})`;\n        })\n        .join('\\n');\n}\n"],"sourceRoot":"../../.."}