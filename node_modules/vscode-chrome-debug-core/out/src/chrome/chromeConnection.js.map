{"version":3,"sources":["src/chrome/chromeConnection.ts"],"names":[],"mappings":";AAAA;;4DAE4D;;AAE5D,gCAAgC;AAEhC,4CAAuC;AACvC,oCAAoC;AACpC,kCAAkC;AAClC,6DAA2C;AAC3C,mFAAsE;AAEtE,mDAAkD;AAIlD,wEAAmE;AACnE,8FAAyF;AAmBzF;;GAEG;AACH,mBAAoB,SAAQ,SAAS;IACjC,YAAY,OAAe,EAAE,SAA6B,EAAE,OAAkC;QAC1F,KAAK,CAAC,OAAO,EAAE,SAAS,EAAE,OAAO,CAAC,CAAC;QAEnC,IAAI,CAAC,EAAE,CAAC,OAAO,EAAE,CAAC;YACd,4BAAM,CAAC,GAAG,CAAC,mBAAmB,GAAG,CAAC,CAAC,QAAQ,EAAE,CAAC,CAAC;QACnD,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,EAAE,CAAC,OAAO,EAAE;YACb,4BAAM,CAAC,GAAG,CAAC,kBAAkB,CAAC,CAAC;QACnC,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,EAAE,CAAC,SAAS,EAAE,MAAM;YACrB,IAAI,MAAW,CAAC;YAChB,IAAI,CAAC;gBACD,MAAM,GAAG,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;YAChC,CAAC;YAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;gBACT,4BAAM,CAAC,KAAK,CAAC,8BAA8B,CAAC,CAAC,OAAO,MAAM,MAAM,EAAE,CAAC,CAAC;gBACpE,MAAM,CAAC;YACX,CAAC;YAED,EAAE,CAAC,CAAC,MAAM,IAAI,CAAC,CAAC,MAAM,CAAC,MAAM,IAAI,MAAM,CAAC,MAAM,CAAC,UAAU,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,CAAC;gBACrE,2HAA2H;gBAC3H,4BAAM,CAAC,OAAO,CAAC,iBAAiB,GAAG,MAAM,CAAC,CAAC;YAC/C,CAAC;QACL,CAAC,CAAC,CAAC;IACP,CAAC;IAEM,IAAI,CAAC,IAAS,EAAE,IAAU,EAAE,EAAyB;QACxD,MAAM,MAAM,GAAG,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC;QACpC,EAAE,CAAC,CAAC,IAAI,CAAC,UAAU,KAAK,SAAS,CAAC,IAAI,CAAC,CAAC,CAAC;YACrC,4BAAM,CAAC,GAAG,CAAC,wCAAwC,MAAM,EAAE,CAAC,CAAC;YAC7D,MAAM,CAAC;QACX,CAAC;QAED,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,EAAE,SAAS,CAAC,CAAC;QAClC,4BAAM,CAAC,OAAO,CAAC,eAAe,GAAG,MAAM,CAAC,CAAC;IAC7C,CAAC;CACJ;AAQD;;GAEG;AACH;IASI,YAAY,eAA0C,EAAE,YAA4B;QAChF,IAAI,CAAC,aAAa,GAAG,YAAY,CAAC;QAClC,IAAI,CAAC,wBAAwB,GAAG,eAAe,IAAI,IAAI,qDAAqB,CAAC,4BAAM,EAAE,qBAAS,CAAC,CAAC;IACpG,CAAC;IAED,IAAW,UAAU,KAAc,MAAM,CAAC,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC;IAE3D,IAAW,GAAG;QACV,MAAM,CAAC,IAAI,CAAC,OAAO,IAAI,IAAI,CAAC,OAAO,CAAC,GAAG,EAAE,CAAC;IAC9C,CAAC;IAED;;OAEG;IACI,MAAM,CAAC,OAAO,GAAG,WAAW,EAAE,IAAI,GAAG,IAAI,EAAE,SAAkB,EAAE,OAAgB,EAAE,oBAA6B;QACjH,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,OAAO,EAAE,IAAI,EAAE,SAAS,EAAE,OAAO,EAAE,oBAAoB,CAAC;aACvE,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC;IACzB,CAAC;IAEM,oBAAoB,CAAC,KAAa,EAAE,oBAA6B;QACpE,IAAI,CAAC,OAAO,GAAG,IAAI,aAAa,CAAC,KAAK,CAAC,CAAC;QACxC,EAAE,CAAC,CAAC,oBAAoB,CAAC,CAAC,CAAC;YACvB,IAAI,CAAC,sBAAsB,GAAG,IAAI,iCAAe,CAAC,IAAI,CAAC,OAA4B,CAAC,CAAC;YACrF,IAAI,uDAA0B,CAAC,oBAAoB,EAAE,IAAI,CAAC,sBAAsB,CAAC,UAAU,CAAC,mBAAmB,CAAC,CAAC,CAAC,KAAK,EAAE,CAAC;YAC1H,IAAI,CAAC,OAAO,GAAG,IAAI,uBAAM,CAAC,IAAI,CAAC,sBAAsB,CAAC,UAAU,CAAC,UAAU,CAAC,CAAC,CAAC;QAClF,CAAC;QAAC,IAAI,CAAC,CAAC;YACJ,IAAI,CAAC,OAAO,GAAG,IAAI,uBAAM,CAAY,IAAI,CAAC,OAAc,CAAC,CAAC;QAC9D,CAAC;QAED,IAAI,CAAC,OAAO,CAAC,EAAE,CAAC,OAAO,EAAE,CAAC,IAAI,4BAAM,CAAC,KAAK,CAAC,sCAAsC,GAAG,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC;IACpG,CAAC;IAEO,OAAO,CAAC,OAAe,EAAE,IAAY,EAAE,SAAkB,EAAE,OAAO,GAAG,gBAAgB,CAAC,cAAc,EAAE,oBAA6B;QACvI,MAAM,CAAC,KAAK,CAAC,UAAU,CAAC,MAAM,IAAI,CAAC,wBAAwB,CAAC,SAAS,CAAC,OAAO,EAAE,IAAI,EAAE,IAAI,CAAC,aAAa,EAAE,SAAS,CAAC,EAAE,OAAO,EAAE,kBAAkB,CAAA,GAAG,CAAC;aAC/I,KAAK,CAAC,GAAG,IAAI,OAAO,CAAC,MAAM,CAAC,MAAM,CAAC,wBAAwB,CAAC,OAAO,EAAE,GAAG,CAAC,OAAO,CAAC,CAAC,CAAC;aACnF,IAAI,CAAC,KAAK;YACP,MAAM,CAAC,IAAI,CAAC,oBAAoB,CAAC,KAAK,EAAE,oBAAoB,CAAC,CAAC;QAClE,CAAC,CAAC,CAAC;IACX,CAAC;IAEM,GAAG;QACN,qGAAqG;QACrG,mEAAmE;QACnE,MAAM,CAAC,OAAO,CAAC,GAAG,CAAC;YACf,IAAI,CAAC,GAAG,CAAC,OAAO,CAAC,uBAAuB,EAAE;YACpC,IAAI,CAAC,GAAG,CAAC,OAAQ,CAAC,GAAG,EAAE;SAChC,CAAC;aACD,IAAI,CAAC,QAAQ,CAAC,EAAE,CAAC,MAAM,CAAC,CAAC,CAAC;IAC/B,CAAC;IAEM,KAAK;QACR,IAAI,CAAC,OAAO,CAAC,KAAK,EAAE,CAAC;IACzB,CAAC;IAEM,OAAO,CAAC,OAAmB;QAC9B,IAAI,CAAC,OAAO,CAAC,EAAE,CAAC,OAAO,EAAE,OAAO,CAAC,CAAC;IACtC,CAAC;;AAhEc,+BAAc,GAAG,KAAK,CAAC,CAAC,KAAK;AADhD,4CAkEC","file":"chromeConnection.js","sourcesContent":["/*---------------------------------------------------------\n * Copyright (C) Microsoft Corporation. All rights reserved.\n *--------------------------------------------------------*/\n\nimport * as WebSocket from 'ws';\n\nimport {telemetry} from '../telemetry';\nimport * as errors from '../errors';\nimport * as utils from '../utils';\nimport {logger} from 'vscode-debugadapter';\nimport {ChromeTargetDiscovery} from './chromeTargetDiscoveryStrategy';\n\nimport {Client, LikeSocket} from 'noice-json-rpc';\n\nimport Crdp from '../../crdp/crdp';\n\nimport {CRDPMultiplexor} from './crdpMultiplexing/crdpMultiplexor';\nimport {WebSocketToLikeSocketProxy} from './crdpMultiplexing/webSocketToLikeSocketProxy';\n\nexport interface ITarget {\n    description: string;\n    devtoolsFrontendUrl: string;\n    id: string;\n    thumbnailUrl?: string;\n    title: string;\n    type: string;\n    url?: string;\n    webSocketDebuggerUrl: string;\n}\n\nexport type ITargetFilter = (target: ITarget) => boolean;\nexport interface ITargetDiscoveryStrategy {\n    getTarget(address: string, port: number, targetFilter?: ITargetFilter, targetUrl?: string): Promise<string>;\n    getAllTargets(address: string, port: number, targetFilter?: ITargetFilter, targetUrl?: string): Promise<ITarget[]>;\n}\n\n/**\n * A subclass of WebSocket that logs all traffic\n */\nclass LoggingSocket extends WebSocket {\n    constructor(address: string, protocols?: string | string[], options?: WebSocket.IClientOptions) {\n        super(address, protocols, options);\n\n        this.on('error', e => {\n            logger.log('Websocket error: ' + e.toString());\n        });\n\n        this.on('close', () => {\n            logger.log('Websocket closed');\n        });\n\n        this.on('message', msgStr => {\n            let msgObj: any;\n            try {\n                msgObj = JSON.parse(msgStr);\n            } catch (e) {\n                logger.error(`Invalid JSON from target: (${e.message}): ${msgStr}`);\n                return;\n            }\n\n            if (msgObj && !(msgObj.method && msgObj.method.startsWith('Network.'))) {\n                // Not really the right place to examine the content of the message, but don't log annoying Network activity notifications.\n                logger.verbose('← From target: ' + msgStr);\n            }\n        });\n    }\n\n    public send(data: any, opts?: any, cb?: (err: Error) => void): void {\n        const msgStr = JSON.stringify(data);\n        if (this.readyState !== WebSocket.OPEN) {\n            logger.log(`→ Warning: Target not open! Message: ${msgStr}`);\n            return;\n        }\n\n        super.send.apply(this, arguments);\n        logger.verbose('→ To target: ' + msgStr);\n    }\n}\n\nexport interface IChromeError {\n    code: number;\n    message: string;\n    data: string;\n}\n\n/**\n * Connects to a target supporting the Chrome Debug Protocol and sends and receives messages\n */\nexport class ChromeConnection {\n    private static ATTACH_TIMEOUT = 10000; // ms\n\n    private _socket: WebSocket;\n    private _crdpSocketMultiplexor: CRDPMultiplexor;\n    private _client: Client;\n    private _targetFilter: ITargetFilter;\n    private _targetDiscoveryStrategy: ITargetDiscoveryStrategy;\n\n    constructor(targetDiscovery?: ITargetDiscoveryStrategy, targetFilter?: ITargetFilter) {\n        this._targetFilter = targetFilter;\n        this._targetDiscoveryStrategy = targetDiscovery || new ChromeTargetDiscovery(logger, telemetry);\n    }\n\n    public get isAttached(): boolean { return !!this._client; }\n\n    public get api(): Crdp.CrdpClient {\n        return this._client && this._client.api();\n    }\n\n    /**\n     * Attach the websocket to the first available tab in the chrome instance with the given remote debugging port number.\n     */\n    public attach(address = '127.0.0.1', port = 9222, targetUrl?: string, timeout?: number, extraCRDPChannelPort?: number): Promise<void> {\n        return this._attach(address, port, targetUrl, timeout, extraCRDPChannelPort)\n            .then(() => { });\n    }\n\n    public attachToWebsocketUrl(wsUrl: string, extraCRDPChannelPort?: number): void {\n        this._socket = new LoggingSocket(wsUrl);\n        if (extraCRDPChannelPort) {\n            this._crdpSocketMultiplexor = new CRDPMultiplexor(this._socket as any as LikeSocket);\n            new WebSocketToLikeSocketProxy(extraCRDPChannelPort, this._crdpSocketMultiplexor.addChannel('extraCRDPEndpoint')).start();\n            this._client = new Client(this._crdpSocketMultiplexor.addChannel('debugger'));\n        } else {\n            this._client = new Client(<WebSocket>this._socket as any);\n        }\n\n        this._client.on('error', e => logger.error('Error handling message from target: ' + e.message));\n    }\n\n    private _attach(address: string, port: number, targetUrl?: string, timeout = ChromeConnection.ATTACH_TIMEOUT, extraCRDPChannelPort?: number): Promise<void> {\n        return utils.retryAsync(() => this._targetDiscoveryStrategy.getTarget(address, port, this._targetFilter, targetUrl), timeout, /*intervalDelay=*/200)\n            .catch(err => Promise.reject(errors.runtimeConnectionTimeout(timeout, err.message)))\n            .then(wsUrl => {\n                return this.attachToWebsocketUrl(wsUrl, extraCRDPChannelPort);\n            });\n    }\n\n    public run(): Promise<void> {\n        // This is a CDP version difference which will have to be handled more elegantly with others later...\n        // For now, we need to send both messages and ignore a failing one.\n        return Promise.all([\n            this.api.Runtime.runIfWaitingForDebugger(),\n            (<any>this.api.Runtime).run()\n        ])\n        .then(() => { }, e => { });\n    }\n\n    public close(): void {\n        this._socket.close();\n    }\n\n    public onClose(handler: () => void): void {\n        this._socket.on('close', handler);\n    }\n}"],"sourceRoot":"../../.."}