{"version":3,"sources":["src/chrome/chromeDebugSession.ts"],"names":[],"mappings":"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","file":"chromeDebugSession.js","sourcesContent":["/*---------------------------------------------------------\n * Copyright (C) Microsoft Corporation. All rights reserved.\n *--------------------------------------------------------*/\n\nimport * as os from 'os';\nimport {DebugProtocol} from 'vscode-debugprotocol';\nimport {LoggingDebugSession, ErrorDestination, Response, logger} from 'vscode-debugadapter';\n\nimport {ChromeDebugAdapter} from './chromeDebugAdapter';\nimport {ITargetFilter, ChromeConnection, IChromeError} from './chromeConnection';\nimport {BasePathTransformer} from '../transformers/basePathTransformer';\nimport {BaseSourceMapTransformer} from '../transformers/baseSourceMapTransformer';\nimport {LineColTransformer} from '../transformers/lineNumberTransformer';\n\nimport {IDebugAdapter} from '../debugAdapterInterfaces';\n\nexport interface IChromeDebugAdapterOpts {\n    targetFilter?: ITargetFilter;\n    logFilePath?: string;\n    enableSourceMapCaching?: boolean;\n\n    // Override services\n    chromeConnection?: typeof ChromeConnection;\n    pathTransformer?: { new(): BasePathTransformer };\n    sourceMapTransformer?: { new(sourceHandles: any, enableSourcemapCaching?: boolean): BaseSourceMapTransformer };\n    lineColTransformer?: { new(session: any): LineColTransformer };\n}\n\nexport interface IChromeDebugSessionOpts extends IChromeDebugAdapterOpts {\n    /** The class of the adapter, which is instantiated for each session */\n    adapter: typeof ChromeDebugAdapter;\n    extensionName: string;\n}\n\n// A failed request can return either an Error, an error from Chrome, or a DebugProtocol.Message which is returned as-is to the client\ntype RequestHandleError = Error | DebugProtocol.Message | IChromeError;\n\nfunction isMessage(e: RequestHandleError): e is DebugProtocol.Message {\n    return !!(<DebugProtocol.Message>e).format;\n}\n\nfunction isChromeError(e: RequestHandleError): e is IChromeError {\n    return !!(<IChromeError>e).data;\n}\n\nexport class ChromeDebugSession extends LoggingDebugSession {\n    private _debugAdapter: IDebugAdapter;\n    private _extensionName: string;\n\n    /**\n     * This needs a bit of explanation -\n     * The Session is reinstantiated for each session, but consumers need to configure their instance of\n     * ChromeDebugSession. Consumers should call getSession with their config options, then call\n     * DebugSession.run with the result. Alternatively they could subclass ChromeDebugSession and pass\n     * their options to the super constructor, but I think this is easier to follow.\n     */\n    public static getSession(opts: IChromeDebugSessionOpts): typeof ChromeDebugSession {\n        // class expression!\n        return class extends ChromeDebugSession {\n            constructor(debuggerLinesAndColumnsStartAt1?: boolean, isServer?: boolean) {\n                super(debuggerLinesAndColumnsStartAt1, isServer, opts);\n            }\n        };\n    }\n\n    public constructor(obsolete_debuggerLinesAndColumnsStartAt1?: boolean, obsolete_isServer?: boolean, opts?: IChromeDebugSessionOpts) {\n        super(opts.logFilePath, obsolete_debuggerLinesAndColumnsStartAt1, obsolete_isServer);\n\n        logVersionInfo();\n        this._extensionName = opts.extensionName;\n        this._debugAdapter = new (<any>opts.adapter)(opts, this);\n\n        const safeGetErrDetails = err => {\n            let errMsg;\n            try {\n                errMsg = (<Error>err).stack ? (<Error>err).stack : JSON.stringify(err);\n            } catch (e) {\n                errMsg = 'Error while handling previous error: ' + e.stack;\n            }\n\n            return errMsg;\n        };\n\n        process.on('uncaughtException', (err: any) => {\n            logger.error(`******** Unhandled error in debug adapter: ${safeGetErrDetails(err)}`);\n            throw err;\n        });\n\n        process.addListener('unhandledRejection', (err: Error|DebugProtocol.Message) => {\n            // Node tests are watching for the ********, so fix the tests if it's changed\n            logger.error(`******** Unhandled error in debug adapter - Unhandled promise rejection: ${safeGetErrDetails(err)}`);\n        });\n    }\n\n    /**\n     * Takes a response and a promise to the response body. If the promise is successful, assigns the response body and sends the response.\n     * If the promise fails, sets the appropriate response parameters and sends the response.\n     */\n    private sendResponseAsync(request: DebugProtocol.Request, response: DebugProtocol.Response, responseP: Promise<any>): void {\n        responseP.then(\n            (body?) => {\n                response.body = body;\n                this.sendResponse(response);\n            },\n            e => this.failedRequest(request.command, response, e));\n    }\n\n    /**\n     * Overload dispatchRequest to the debug adapters' Promise-based methods instead of DebugSession's callback-based methods\n     */\n    protected dispatchRequest(request: DebugProtocol.Request): void {\n        const response = new Response(request);\n        try {\n            logger.verbose(`From client: ${request.command}(${JSON.stringify(request.arguments) })`);\n\n            if (!(request.command in this._debugAdapter)) {\n                this.sendUnknownCommandResponse(response, request.command);\n                return;\n            }\n\n            const responseP = Promise.resolve(this._debugAdapter[request.command](request.arguments, request.seq));\n            this.sendResponseAsync(\n                request,\n                response,\n                responseP);\n        } catch (e) {\n            this.failedRequest(request.command, response, e);\n        }\n    }\n\n    private failedRequest(requestType: string, response: DebugProtocol.Response, error: RequestHandleError): void {\n        if (isMessage(error)) {\n            this.sendErrorResponse(response, error as DebugProtocol.Message);\n            return;\n        }\n\n        if (requestType === 'evaluate') {\n            // Errors from evaluate show up in the console or watches pane. Doesn't seem right\n            // as it's not really a failed request. So it doesn't need the [extensionName] tag and worth special casing.\n            response.message = error ? error.message : 'Unknown error';\n            response.success = false;\n            this.sendResponse(response);\n            return;\n        }\n\n        const errMsg = isChromeError(error) ?\n            error.message + ': ' + error.data :\n            (error.stack || error.message);\n\n        logger.error(`Error processing \"${requestType}\": ${errMsg}`);\n\n        // These errors show up in the message bar at the top (or nowhere), sometimes not obvious that they\n        // come from the adapter, so add extensionName\n        this.sendErrorResponse(\n            response,\n            1104,\n            '[{_extensionName}] Error processing \"{_requestType}\": {_stack}',\n            { _extensionName: this._extensionName, _requestType: requestType, _stack: errMsg },\n            ErrorDestination.Telemetry);\n    }\n\n    private sendUnknownCommandResponse(response: DebugProtocol.Response, command: string): void {\n        this.sendErrorResponse(response, 1014, `[${this._extensionName}] Unrecognized request: ${command}`, null, ErrorDestination.Telemetry);\n    }\n}\n\nfunction logVersionInfo(): void {\n    logger.log(`OS: ${os.platform()} ${os.arch()}`);\n    logger.log(`Adapter node: ${process.version} ${process.arch}`);\n    logger.log('vscode-chrome-debug-core: ' + require('../../../package.json').version);\n}\n"],"sourceRoot":"../../.."}